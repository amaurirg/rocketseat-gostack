App de ideias
https://github.com/florinpop17/app-ideas

Inspiração de layouts
https://dribbble.com/
ou
https://br.pinterest.com/

Design
https://www.figma.com/



REACT do zero
=============

- Criar pasta frontend
- Acessar essa nova pasta
- Criar o arquivo package.json
    yarn init -y
- Instalar React e React Dom
    yarn add react react-dom
- Criar o arquivo index.html em ./public
    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ReactJS</title>
    </head>
    <body>
        <div id="app"></div>
    </body>
    </html>
- Precisamos do Babel e Webpack
    Babel: Converte (transpila) código do react para um código que o browser entenda
    Webpack: Converte cada arquivo (.js, .css, .png) de maneira diferente
        Loaders: babel-loader, css-loader, image-loader, file-loader
            babel-loader: converte JS para que o browser entenda
            css-loader: converte CSS para que o browser entenda
            image-loader:  converte imagens para que o browser entenda
    - Instalação
        yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli
- Criar um arquivo babel.config.js na raiz do frontend
    No site do Babel (babeljs.io) em Docs -> Configure Babel -> babel.config.json existem diversas configs
    Por enquanto criaremos somente os presets que são config de terceiros. Configuração padrão:
        module.exports = {
            presets: [
                '@babel/preset-env',
                '@babel/preset-react'
            ],
        }
        @babel/preset-env: converte JS mais atual para o mais antigo se o browser não entender, env = ambiente
        @babel/preset-react: adiciona funcionalidades do React nessa conversão
- Instalar @babel/cli para interface de linha de comando
    yarn add @babel/cli
- Criar index.js em ./src
    const soma = (a, b) => {
        return a + b;
    }
    console.log(soma(1, 3));
- Configurar o arquivo bundle.js na raiz do frontend para converter o index.js nesse out-file, assim os browsers entendam
    yarn babel src/index.js --out-file public/bundle.js
-Instalar Babel Loader
    yarn add babel-loader
- Configurar o arquivo webpack.config.js na raiz do frontend
    const path = require('path');

    module.exports = {
        entry: path.resolve(__dirname, 'src', 'index.js'),
        output: {
            path: path.resolve(__dirname, 'public'),
            filename: 'bundle.js'
        },
        module: {
            rules: [
                {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                    }
                }
            ]
        }
    }

    path: módulo do Node
    __dirname: diretório do arquivo webpack.config.js
    src: pasta
    index.js: arquivo
    entry: arquivo de entrada da aplicação
    output: arquivo que será gerado
    filename: nome do arquivo que será criado
    devServer: caminho para o diretório que contém os arquivos públicos
    module: módulos que serão utilizados (loaders)
    rules: regras para qual loader utilizar
    test: tipo de arquivo que o babel-loader converterá
    exclude: para não percorrer por arquivos nessa pasta
    use: qual ferramenta será utilizada
    loader: qual loader será utilizado
- Converter o arquivo index.js para bundle.js
    yarn webpack --mode development
- Instalar servidor de desenvolvimento webpack para monitorar e aplicar as mudanças do código
    yarn add webpack-dev-server -D
- Inicie o servidor
    yarn webpack-dev-server --mode development


RENDERIZANDO COM REACT
======================

- Apague o conteúdo de index.js em ./src e escreva o código
    import React from 'react';
    import { render } from 'react-dom';

    render(<h1>Hello World</h1>, document.getElementById('app'));

    O conteúdo de <h1> será renderizado dentro da <div id="app"></div>


Componentes
===========

    Crie o arquivo App.js em ./src
    import React from 'react';

    function App() {
    return <h1>Hello World</h1>
    }

    export default App;
- Importe o App.js dentro de index.js
    import App from './App';
    Substitua o <h1> por <App />
        render(<App />, document.getElementById('app'));


FRAGMENT
========

O React não aceita dois componentes no return
    export default function App() {
        return (
            <Header />
            <Header />
        )
    }

Então precisamos envolvê-los em um outro que poderia ser uma <div> mas geraria um outro HTML.
O mais correto é usar o <Fragment> ou <> </>
    export default function App() {
        return (
            <>
            <Header />
            <Header />
            </>
        )
    }


PROPRIEDADES
============

    Podemos passar por exemplo um título para o Header
    Em App.js:
        export default function App() {
            return (
                <>
                <Header title="Homepage" />
                <Header title="Projects" />
                </>
            )
        }
    Em Header.js:
        import React from 'react';

        export default function Header(props) {
            return (
            <header>
                <h1>{ props.title }</h1>
            </header>
            );
        }

        OU DESESTRUTURANDO:
        
        import React from 'react';

        export default function Header({ title }) {
            return (
            <header>
                <h1>{ title }</h1>
            </header>
            );
        }
    
    
    CHILDREN
    ========

    Em App.js:
        import React from 'react';
        import Header from './components/Header';

        export default function App() {
            return (
                <>
                <Header title="Homepage">
                    <ul>
                    <li>Homepage</li>
                    <li>Projects</li>
                    </ul>
                </Header>
                <Header title="Projects">
                    <ul>
                    <li>Homepage</li>
                    <li>Projects</li>
                    <li>Login</li>
                    </ul>
                </Header>
                </>
            )
        }
    
    Em Header.js:
    import React from 'react';

    export default function Header({ title, children }) {
        return (
            <header>
            <h1>{title}</h1>
            {children}
            </header>
        );
        }
