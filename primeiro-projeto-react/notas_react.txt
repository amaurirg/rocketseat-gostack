- Instalando Create React App:
    npm install -g create-react-app

- Criando o projeto React com Typescript:
    create-react-app primeiro-projeto-react --template=typescript

- Em primeiro-projeto-react, deletamos arquivos css, svg, ico e de testes (exceto setupTests.ts) que não utilizaremos e suas importações:
  - Arquivos deletados:
    README.md
    src/App.css
    src/App.test.tsx
    src/index.css
    src/logo.svg
    src/serviceWorker.ts
    public/favicon.ico
    public/logo192.png
    public/logo512.png
    public/manifest.json

  - Retirando conteúdo e importações os arquivos ficarão assim:
    - Em src/index.tsx:
        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';

        ReactDOM.render(
          <React.StrictMode>
            <App />
          </React.StrictMode>,
          document.getElementById('root')
        );

    - Em src/App.tsx:
        import React from 'react';

        function App() {
          return (
            <h1>Hello World</h1>
          );
        }

        export default App;

    - Em public/index.html:
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta name="theme-color" content="#000000" />
            <title>Github Explorer</title>
          </head>
          <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>
          </body>
        </html>



- Executamos o projeto:
    yarn start

- Instalamos as dependências para trabalhar com rotas:
    yarn add react-router-dom
    yarn add @types/react-router-dom -D 

- Criamos o arquivo src/pages/Dashboard/index.tsx:
    import React from 'react';

    const Dashboard: React.FC = () => {
      return <h1>Dashboard</h1>
    }

    export default Dashboard;

    Dessa forma acima é mais fácil para definir qual o tipo de retorno da função. Usaremos o tipo FC (FunctionComponent) do React. Não é mais utilizado o tipo de classe para criar componente.
    A outra forma seria:
      function Dashboard() {}
    Mas fica mais verboso.

- Criamos um outro arquivo src/pages/Repository/index.tsx:
    import React from 'react';

    const Repository: React.FC = () => {
      return <h1>Repository</h1>
    }

    export default Repository;

- Criamos o arquivo de rotas src/routes/index.tsx:
    import React from 'react';
    import { Switch, Route } from 'react-router-dom';
    import Dashboard from '../pages/Dashboard';
    import Repository from '../pages/Repository';

    const Routes: React.FC = () => (
      <Switch>
        <Route path='/' exact component={Dashboard} />
        <Route path='/repository' component={Repository} />
      </Switch>
    );

    export default Routes;

    Poderíamos criar assim:
      const Routes: React.FC = () => {
        return (

        );
      }
    Porém quando o return vem logo em seguida fazemos assim para dicar menos verboso:
      const Routes: React.FC = () => (

      )

- Em src/App.tsx:
    import React from 'react';
    import { BrowserRouter } from 'react-router-dom';
    import Routes from './routes';

    const App: React.FC = () => (
      <BrowserRouter>
        <Routes />
      </BrowserRouter>
    );

    export default App;

    BrowserRouter: para acessar as rotas no browse, exemplo: /dashboard
    Switch: garante que apenas uma rota seja exibida



ESTILOS CSS
===========
- Instalar Styled Components para estilos isolados e não de forma global(padrão) onde muda todos os componentes:
    yarn add styled-components
    yarn add @types/styled-components -D

- Instalar Polished para trabalhar com cores:
    yarn add polished

O que muda seria como no exemplo abaixo:
  - Em um arquivo styles.css ficaria assim:
      h1 {
        font-size: 48px;
        color: #3A3A3A;
      }
  
  - Em um arquivo styles.ts fica assim:
      import styled from 'styled-components';

      export const Title = styled.h1`
        font-size: 48px;
        color: #3A3A3A;
      `;

OBS: Caso não fique com a sintaxe do css, no VSCode instale o vscode-styled-components.

- Em src/pages/Dashboard/index.tsx importamos o Title:
    import { Title} from './styles';

  - Alteramos
      const Dashboard: React.FC = () => {
        return <h1>Dashboard</h1>
      }
    
    Por:
      const Dashboard: React.FC = () => {
        return <Title>Dashboard</Title>
      }
      
Podemos incluir CSS de uma forma mais interessante. O que faríamos com input dentro do form dessa forma:
 form input {

 } 

Faremos assim com Template Literals:
  export const Form = styled.form`
    margin-top: 40px;
    max-width: 700px;

    display: flex;

    input {
      flex: 1;
      height: 70px;
      padding: 0 24px;
      border: 0;
      border-radius: 5px 0 0 5px;
    }
  `;

Se tivermos um atributo hover, por exemplo, podemos incluir diretamente dentro do elemento:
  button {
    width: 210px;
    height: 70px;
    background: #04D361;
    border-radius: 0 5px 5px 0;
    border: 0;
    color: #FFF;
    font-weight: bold;

    &:hover {
      background: ${shade(0.2, '#04D361')};
    }
  }

- Criamos o arquivo src/styles/global.ts para resetar o css padrão do navegador.

- Criamos a pasta src/assets para armazenar as imagens e colocamos no body.


- Instalar pacote de ícones:
    yarn add react-icons



*********************************
*   OS ARQUIVOS FICARAM ASSIM   *
*********************************

- Em src/styles/global.ts:
    import { createGlobalStyle } from 'styled-components';
    import githubBackground from '../assets/github-background.svg';

    export default createGlobalStyle`
      * {
        margin: 0;
        padding: 0;
        outline: 0;
        box-sizing: border-box;
      }

      body {
        background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;
        -webkit-font-smoothing: antialiased;
      }

      body, input, button {
        font: 16px Roboto, sans-serif;
      }

      #root {
        max-width: 960px;
        margin: 0 auto;
        padding: 40px 20px;
      }

      button {
        cursor: pointer;
      }
    `;

    #root é a div do public/index.html. Usamos tamanho máximo(max-width) porque no mobile terá menos que 960px. Em padding colocamos 20px para não encostar na direita quando diminuir.
    background: #F0F0F5 url(${githubBackground}) no-repeat 70% top; incluímos a url em formato de variável com 70% para a direita e alinhada ao topo com top.
    -webkit-font-smoothing: antialiased;: deixa as fontes mais bem definidas. Só funciona no Chrome.
    Para instalar a fonte Roboto:
      https://fonts.google.com/
      Pesquise por Roboto e selecione as versões:
        Regular 400
        Bold 700
        Em Embed copie o link e cole em public/index.html abaixo do <title>

- Em src/App.tsx:
    import React from 'react';
    import { BrowserRouter } from 'react-router-dom';
    import Routes from './routes';
    import GlobalStyle from './styles/global';

    const App: React.FC = () => (
      <>
        <BrowserRouter>
          <Routes />
        </BrowserRouter>
        <GlobalStyle />
      </>
    );

    export default App;

- Em src/index.tsx:
    import React from 'react';
    import ReactDOM from 'react-dom';
    import App from './App';

    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById('root')
    );

- Em src/pages/Dashboard/index.tsx:
    import React from 'react';
    import { FiChevronRight } from 'react-icons/fi';
    import logoImg from '../../assets/logo.svg';
    import { Title, Form, Repositories } from './styles';

    const Dashboard: React.FC = () => {
      return (
        <>
          <img src={logoImg} alt="Github Explorer" />
          <Title>Explore repositórios no Github</Title>

          <Form>
            <input placeholder="Digite o nome do repositório" />
            <button type="submit">Pesquisar</button>
          </Form>

          <Repositories>
            <a href="teste">
              <img src="https://avatars3.githubusercontent.com/u/11185971?s=460&u=7fa8c89bd71c2309d770d6ea421f0e8c6a9996e8&v=4" alt="Amauri" />
              <div>
                <strong>amaurirg/rocketseat-es6</strong>
                <p>Curso gratuito Rocketseat ES6</p>
              </div>
              <FiChevronRight size={20} />
            </a>

            <a href="teste">
              <img src="https://avatars3.githubusercontent.com/u/11185971?s=460&u=7fa8c89bd71c2309d770d6ea421f0e8c6a9996e8&v=4" alt="Amauri" />
              <div>
                <strong>amaurirg/rocketseat-es6</strong>
                <p>Curso gratuito Rocketseat ES6</p>
              </div>
              <FiChevronRight size={20} />
            </a>

            <a href="teste">
              <img src="https://avatars3.githubusercontent.com/u/11185971?s=460&u=7fa8c89bd71c2309d770d6ea421f0e8c6a9996e8&v=4" alt="Amauri" />
              <div>
                <strong>amaurirg/rocketseat-es6</strong>
                <p>Curso gratuito Rocketseat ES6</p>
              </div>
              <FiChevronRight size={20} />
            </a>
          </Repositories>

        </>
      )
    }

    export default Dashboard;

- Em src/pages/Dashboard/styles.ts:
    import styled from 'styled-components';
    import {shade} from 'polished';

    export const Title = styled.h1`
      font-size: 48px;
      color: #3A3A3A;
      max-width: 450px;
      line-height: 56px;
      margin-top: 80px;
    `;

    export const Form = styled.form`
      margin-top: 40px;
      max-width: 700px;

      display: flex;

      input {
        flex: 1;
        height: 70px;
        padding: 0 24px;
        border: 0;
        border-radius: 5px 0 0 5px;
        color: #3A3A3A;

        &::placeholder {
          color: #A8A8B3;
        }
      }

      button {
        width: 210px;
        height: 70px;
        background: #04D361;
        border-radius: 0 5px 5px 0;
        border: 0;
        color: #FFF;
        font-weight: bold;
        transition: background-color 0.2s;

        &:hover {
          background: ${shade(0.2, '#04D361')};
        }
      }
    `;

    export const Repositories = styled.div`
      margin-top: 80px;
      max-width: 700px;

      a {
        background: #FFF;
        border-radius: 5px;
        width: 100%;
        padding: 24px;
        display: block;
        text-decoration: none;
        display: flex;
        align-items: center;
        transition: transform 0.2s;

        &:hover {
          transform: translateX(10px);
        }

        & + a {
          margin-top: 16px;
        }

        img {
          width: 64px;
          height: 64px;
          border-radius: 50%;
        }

        div {
          margin: 0 16px;
          flex: 1;

          strong {
            font-size: 20px;
            color: #3D3D4D;
          }

          p {
            font-size: 18px;
            color: #A8A8B3;
            margin-top: 4px;
          }
        }

        svg {
          margin-left: auto;
          color: #CBCBD6;
        }
      }
    `;

    Em div o flex: 1; serve para que a imagem não fique achatada se ajustando ao tamanho disponível.

- Em src/pages/Repository/index.tsx:
    import React from 'react';

    const Repository: React.FC = () => {
      return <h1>Repository</h1>
    }

    export default Repository;


- Em src/routes/index.tsx:
    import React from 'react';
    import { Switch, Route } from 'react-router-dom';
    import Dashboard from '../pages/Dashboard';
    import Repository from '../pages/Repository';

    const Routes: React.FC = () => (
      <Switch>
        <Route path='/' exact component={Dashboard} />
        <Route path='/repository' component={Repository} />
      </Switch>
    );

    export default Routes;


**********************
*  FIM DOS ARQUIVOS  *
**********************


CONECTANDO A API
================

- Instalar AXIOS:
    yarn add axios

- Criamos o arquivo src/services/api.ts:
    import axios from 'axios';

    const api = axios.create({
      baseURL: 'https://api.github.com',
    });

    export default api;

- Em src/pages/Dashboard/index.tsx:
  - Importamos a api:
      import api from '../../services/api';

  - Usaremos o useState para armazenamento do estado:
      import React, { useState } from 'react';

      const [repositories, setRepositories] = useState([]);

  - Precisaremos:
    - Ter acesso ao que foi digitado no input
        const [newRepo, setNewRepo] = useState('');
        - No input acrescentamos:
            value={newRepo}
            onChange={e => setNewRepo(e.target.value)}

            value: texto do input
            onChange: recebe um evento(e) quando o usuário altera o valor do input
            e.target.value: valor do input

        - No Form chamamos a função quando o formulário for submetido:
            <Form onSubmit={handleAddRepository}>

        - Função handleAddRepository somente para visualizarmos o value de input:
            function handleAddRepository(event: FormEvent<HTMLFormElement>): void {
              event.preventDefault();
              console.log(newRepo);
            }

            event: evento de submit do formulário
            FormEvent: o tipo de retorno importado do React que recebe um parâmetro
            HTMLFormElement: representa o elemento HTML do form
            event.preventDefault(); : para não recarregar a página

    - Consumir api do github
    - Adicionar um novo repositório
    - Salvar novo repositório no estado
        
  - Precisaremos criar essa função:
      async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {
        event.preventDefault();
        const response = await api.get(`repos/${newRepo}`);
        const repository = response.data;
        setRepositories([...repositories, repository]);

      }
  
    Nessa hora terá um erro de typescript porque repositories está como retorno "never", um tipo que não deveria existir:
      setRepositories([...repositories, repository]);
    
    - Precisamos então criar uma interface:
        interface Repository {
          full_name: string;
          description: string;
          owner: {
            login: string;
            avatar_url: string;
          }
        }

    - E alterar a declaração da variável com o tipo correto para corrigir o erro:
        const [repositories, setRepositories] = useState<Repository[]>([]);

    - A variável repository também está com o tipo "any" e vamos corrigir:
        O método get do axios não sabe qual será o tipo do retorno. Se clicarmos, pressionando CTRL, em get (const response = await api.get(`repos/${newRepo}`);) entraremos em node_modules/axios/index.d.ts e veremos que:
          get<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;
        
        Ou seja, R é uma resposta da Promise que recebe T como parâmetro. Entrando em AxiosResponse veremos o formato de data que é T:
          export interface AxiosResponse<T = any>  {
            data: T;
            ...
      
      - Vamos incluir o retorno do tipo Repository alterando:
          const response = await api.get(`repos/${newRepo}`);

        Para:
          const response = await api.get<Repository>(`repos/${newRepo}`);

        Agora repository tem acesso a interface Repository, exemplo:
          repository.description
          repository.owner.avatar_url



LIDANDO COM ERROS
=================

  - Iniciamos o valor como string vazia pois teremos mensagens de erro:
      const [inputError, setInputError] = useState('');
  
  - Fazemos a verificação se o input está vazio ou com repositório inexistente:
      async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {
        event.preventDefault();

        if(!newRepo) {
          setInputError('Digite o autor/nome do repositório');
          return;
        }
        
        try {
          const response = await api.get<Repository>(`repos/${newRepo}`);
          const repository = response.data;
          setRepositories([...repositories, repository]);
          setNewRepo('');
        } catch (err) {
            setInputError('Repositório não encontrado');
        }
        
      }

      Como a mensagem do Github virá em inglês, setamos nossa própria mensagem no catch.

  - Precisamos mostrar esse erro abaixo do Form:
    - Criamos o elemento Error como span em src/pages/Dashboard/styles.ts:
        export const Error = styled.span`
          display: block;
          color: #C53030;
          margin-top: 8px;
        `;
    
    - Voltando em src/pages/Dashboard/index.tsx, importamos Error:
        import { Title, Form, Repositories, Error } from './styles';

    - Fazemos a verificação que só retornará se as duas condições forem true porque só queremos mostrar a mensagem se houver erro:
        {inputError && <Error>{inputError}</Error>}

    - Limpamos a mensagem de erro caso tenha encontrado o repositório abaixo de setNewRepo('');:
        setInputError('');

    - Podemos ter acesso às propriedades do componente estilizado por dentro dos estilos:
      - Colocaremos uma borda no input quando houver um erro. Temos que passar as props ao elemento estilizado, no caso form;
        - Em Form, tem que ser nesse componente porque ele é o estilizado:
            Como usaremos:
              <Form hasError={!!inputError} onSubmit={handleAddRepository}>
            Poderia ser assim:
              <Form hasError={Boolean(inputError)} onSubmit={handleAddRepository}>

            {Boolean(inputError)} ou {!!inputError}: se o valor for vazio o Boolean colocará false e se tiver algum valor colocará true

            !! ---> truthy, falsy: Com um ! converte o boolean de true para false ou vice-versa e com dois !! converte o que foi convertido anteriormente com um !
            truthy: qualquer valor que não é vazio
            falsy: qualquer valor vazio

        - Como o Form não tem hasError, criamos uma interface em src/pages/Dashboard/styles.ts:
            interface FormProps {
              hasError: boolean;
            }

          - Informamos o retorno na construção do elemento:
              export const Form = styled.form<FormProps>`

          - Como não temos acesso as propriedades dentro dos parâmetros da função em styled components, colocaremos dentro do input a borda e colocaremos uma função para recebermos as props. Poderíamos criar um className em Form e estilizá-la mas a forma abaixo é melhor:
            - Precisamos importar css de styled-components para termos sintaxe css na função:
                import styled, { css } from 'styled-components';

            input {
              ...
              border: 2px solid #FFF;
              border-right: 0;

              ${(props) => props.hasError && css`
                border-color: #C53030;
              `}
            }



SALVANDO OS REPOSITÓRIOS NO LOCAL STORAGE
=========================================

Sempre que atualizamos a página os repositórios somem e para isso iremos armazená-los no localStorage. Assim quando adicionarmos, deletarmos ou alterarmos esses dados, serão mostrados.
Utilizaremos o useEffect() que recebe dois argumentos: o primeiro é a função e o segundo é a variável. Sempre que essa variável for alterada o useEffect() executará a função e mostrará em tela.

- Importamos o useEffect:
    import React, { useState, FormEvent, useEffect } from 'react';

- Dentro de useEffect setamos o item com @<nome_da_aplicação>:<nome_da_informação> para que um storage não atrapalhe outro caso estejam utilizando a mesma porta. Como localStorage não aceita array, precisamos convertê-lo em string, usaremos JSON que é uma variável global no Node, React, React Native para que o retorno seja um JSON.
    useEffect(() => {
      localStorage.setItem(
        '@GithubExplorer:repositories',
        JSON.stringify(repositories),
      );
    }, [repositories]);

Agora se inspecionarmos Application->Local Storage->http://localhost:3000 veremos os dados em @GithubExplorer:repositories, porém ainda precisamos manter os dados quando atualizarmos a página.
Temos duas opções:
  A primeira criamos useEffect sem nenhuma dependência, ou seja, executaria somente uma vez quando o componente fosse mostrado em tela.
    useEffect(() => {}, []);
    Daí pegaríamos os dados no localStorage(getItem) e setaríamos o valor(setRepositories) porém acompanhando o raciocínio:
      - A aplicação foi mostrada uma vez em tela
      - Buscamos os dados em localStorage
      - Setamos o valor de repositories
    Dessa forma alteramos duas vezes o valor de repositories: uma quando iniciou com valor vazio e outra quando buscamos e alteramos os dados. Preferimos evitar isso.
  
  A segunda opção é, como o localStorage é uma api síncrona(não precisa async/await) conseguimos alterar o array por uma função quando declararmos seu valor inicial:

  Antes:
    const [repositories, setRepositories] = useState<Repository[]>([]);

  Depois:
    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');

      if (storagedRepositories) {
        return JSON.parse(storagedRepositories);
      } else {
        return [];
      }
    });

    Pegamos os dados no localStorage, depois verificamos se existe algum valor e inicializamos seu valor com esses ou dados ou se não tiver dados será inicializado como vazio pelo 'else'. Usamos JSON.parse porque quando salvamos foi em formato string e agora precisamos iniciar o valor como um array.



NAVEGANDO EM ROTAS
==================

Não podemos utilizar o <a> porque ele recarrega a página. Usaremos o <Link> do React para isso.
Trocamos <a></a> por <Link></Link> e href="" por to="":
  <a key={repository.full_name} href="teste">
  <Link key={repository.full_name} to="/repository">

Somente desse jeito não redicionará corretamente para o repositório porque nossa url será repository/<autor>/<repositório> tendo outras barras e para isso precisamos especificar no arquivo  src/routes/index.tsx a rota com um sinal de + para que o React possa entender que tudo que vier após repository/ faz parte dessa url.
  <Route path='/repository/:repository+' component={Repository} />

E no <link> colocaremos:
  <Link key={repository.full_name} to={`/repository/${repository.full_name}`}>

Agora precisamos pegar o nome do repositório:
  - Importamos useRouteMatch no arquivo src/pages/Repository/index.tsx:
      import { useRouteMatch } from 'react-router-dom';

  - Retornamos o nome do repositório:
      return <h1>Repository: {params.repository}</h1>;

Porém ele não reconhece que o params possui repository. Criamos uma interface para isso:
  interface RepositoryParams {
    repository: string;
  }

  E informamos o retorno:
    const { params } = useRouteMatch<RepositoryParams>();



*********************************
*   OS ARQUIVOS FICARAM ASSIM   *
*********************************

 - Em src/pages/Repository/index.tsx:
    import React from 'react';
    import { useRouteMatch } from 'react-router-dom';

    interface RepositoryParams {
      repository: string;
    }

    const Repository: React.FC = () => {
      const { params } = useRouteMatch<RepositoryParams>();
    return <h1>Repository: {params.repository}</h1>;
    }

    export default Repository;

- Em src/routes/index.tsx:
    import React from 'react';
    import { Switch, Route } from 'react-router-dom';
    import Dashboard from '../pages/Dashboard';
    import Repository from '../pages/Repository';

    const Routes: React.FC = () => (
      <Switch>
        <Route path='/' exact component={Dashboard} />
        <Route path='/repository/:repository+' component={Repository} />
      </Switch>
    );

    export default Routes;

- Em src/pages/Dashboard/index.tsx:
    import React, { useState, FormEvent, useEffect } from 'react';
    import api from '../../services/api';
    import { FiChevronRight } from 'react-icons/fi';
    import logoImg from '../../assets/logo.svg';
    import { Title, Form, Repositories, Error } from './styles';
    import { Link } from 'react-router-dom';

    interface Repository {
      full_name: string;
      description: string;
      owner: {
        login: string;
        avatar_url: string;
      }
    }

    const Dashboard: React.FC = () => {
      const [newRepo, setNewRepo] = useState('');
      const [inputError, setInputError] = useState('');
      const [repositories, setRepositories] = useState<Repository[]>(() => {
        const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');

        if (storagedRepositories) {
          return JSON.parse(storagedRepositories);
        } else {
          return [];
        }
      });

      useEffect(() => {
        localStorage.setItem(
          '@GithubExplorer:repositories',
          JSON.stringify(repositories),
        );
      }, [repositories]);

      async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {
        event.preventDefault();

        if(!newRepo) {
          setInputError('Digite o autor/nome do repositório');
          return;
        }
        
        try {
          const response = await api.get<Repository>(`repos/${newRepo}`);
          const repository = response.data;
          setRepositories([...repositories, repository]);
          setNewRepo('');
          setInputError('');
        } catch (err) {
            setInputError('Repositório não encontrado');
        }
        
      }
      return (
        <>
          <img src={logoImg} alt="Github Explorer" />
          <Title>Explore repositórios no Github</Title>

          <Form hasError={!!inputError} onSubmit={handleAddRepository}>
            <input
              value={newRepo}
              onChange={(e) => setNewRepo(e.target.value)}
              placeholder="Digite o nome do repositório" />
            <button type="submit">Pesquisar</button>
          </Form>

          {inputError && <Error>{inputError}</Error>}

          <Repositories>
            {repositories.map(repository => (
              <Link key={repository.full_name} to={`/repository/${repository.full_name}`}>
                <img src={repository.owner.avatar_url} alt={repository.owner.login} />
                <div>
                  <strong>{repository.full_name}</strong>
                  <p>{repository.description}</p>
                </div>
                <FiChevronRight size={20} />
              </Link>
            ))}
          </Repositories>

        </>
      )
    }

    export default Dashboard;


**********************
*  FIM DOS ARQUIVOS  *
**********************



ESTILIZANDO DETALHE DO REPOSITÓRIO
==================================

- Criamos o arquivo src/pages/Repository/styles.ts:
  - Criamos um Header com o logo e o botão de voltar:
      import styled from 'styled-components';

      export const Header = styled.header`

      `;

- Em src/pages/Repository/index.tsx:
  - Importamos o Header, a logo e o Link:
      import { Header } from './styles';
      import logoImg from '../../assets/logo.svg';
      import { useRouteMatch, Link } from 'react-router-dom';

- Alteramos o return de <h1> para () e colocamos o Header, logo, Link dentro:
    const Repository: React.FC = () => {
      const { params } = useRouteMatch<RepositoryParams>();
      return (
        <Header>
          <img src={logoImg} alt="Github Explorer" />
          <Link to="/">
            <FiChevronLeft size={16} />
            Voltar
          </Link>
        </Header>
      );
    }

- Vamos estilizar em src/pages/Repository/styles.ts:
    import styled from 'styled-components';

    export const Header = styled.header`
      display: flex;
      align-items: center;
      justify-content: space-between;

      a {
        display: flex;
        align-items: center;
        text-decoration: none;
        color: #A8A8B3;
        transition: color 0.2s;

        &:hover {
          color: #666;
        }

        svg {
          margin-right: 4px;
        }
      }
    `;

- Agora vamos criar um novo componente que conterá as informações do repositório.
  - Em src/pages/Repository/index.tsx:
      <RepositoryInfo>
        <header>
          <img src="https://avatars3.githubusercontent.com/u/11185971?s=460&u=7fa8c89bd71c2309d770d6ea421f0e8c6a9996e8&v=4" alt="Amauri"/>
          <div>
            <strong>amaurirg/repositorio</strong>
            <p>descrição do repositorio</p>
          </div>
        </header>
        <ul>
          <li>
            <strong>1808</strong>
            <span>Stars</span>
          </li>
          <li>
            <strong>48</strong>
            <span>Forks</span>
          </li>
          <li>
            <strong>67</strong>
            <span>Issues abertas</span>
          </li>
        </ul>
      </RepositoryInfo>

OBS: Sempre crie elementos no HTML com até dois níveis abaixo como no <header> que tem um nível com <img> e <div> e a <div> que tem outro nível. Se passar disso é melhor pensar em isolar em componentes como um <RepositoryInfoHeader> para conseguir visualizar melhor, dar manutenção e com um css mais organizado e não poluído.

- Criaremos o componente para as issues:
    import { FiChevronLeft, FiChevronRight } from 'react-icons/fi';
    import { Header, RepositoryInfo, Issues } from './styles';

      <Issues>
        <Link to="asdsdf">
          <div>
            <strong>asdsf</strong>
            <p>fdddf</p>
          </div>
          <FiChevronRight size={20} />
        </Link>
      </Issues>

- Vamos estilizar em src/pages/Repository/styles.ts:
    export const Issues = styled.div`
      margin-top: 80px;

      a {
        background: #FFF;
        border-radius: 5px;
        width: 100%;
        padding: 24px;
        display: block;
        text-decoration: none;
        display: flex;
        align-items: center;
        transition: transform 0.2s;

        &:hover {
          transform: translateX(10px);
        }

        & + a {
          margin-top: 16px;
        }

        div {
          margin: 0 16px;
          flex: 1;

          strong {
            font-size: 20px;
            color: #3D3D4D;
          }

          p {
            font-size: 18px;
            color: #A8A8B3;
            margin-top: 4px;
          }
        }

        svg {
          margin-left: auto;
          color: #CBCBD6;
        }
      }
    `;



LISTANDO ISSUES DA API
======================

Precisamos carregar as issues junto com a página e para isso utilizaremos useEffect() e a api:
- Importamos useEffect:
    import React, { useEffect } from 'react';
    import api from '../../services/api';

- Teremos duas chamadas a api do Github porque a primeira traz os dados do repositório mas não traz as issues, somente issues_url.
  Poderíamos fazer dessa forma, fazendo as duas chamadas com async/await:
    useEffect(() => {
      async function loadData(): Promise<void> {
        const repository = await api.get(`repos/${params.repository}`);
        const issues = await api.get(`repos/${params.repository}/issues`);
      }
      loadData();
    }, [params.repository]);

  Porém a segunda chamada não depende da primeira. Então porque esperar? Faremos com que ambas as chamadas sejam feitas simultanemante.

  Podemos fazer de duas formas:
    useEffect(() => {
      async function loadData(): Promise<void> {
        const [repository, issues] = await Promise.all([
          api.get(`repos/${params.repository}`),
          api.get(`repos/${params.repository}/issues`)
        ]);
        console.log(repository);
        console.log(issues);
      }
      loadData();
    }, [params.repository]);

    const [repository, issues]: foi desestruturado de response
    await: só prosseguirá o resto do código quando as chamadas acabarem
    Promise.all(): executa várias chamadas assíncronas ao mesmo tempo
    Existe também o Promise.race(): faz chamada para todas e qual retornar primeiro "ganhou", retornando essa resposta, descartando os resultados das outras.

  Ou dessa outra forma que usaremos no projeto:
    useEffect(() => {
      api.get(`repos/${params.repository}`).then(response => {
        setRepository(response.data);
      });
      api.get(`repos/${params.repository}/issues`).then(response => {
        setIssues(response.data);
      });
    }, [params.repository]);

    [params.repository]: esse parâmetro é importante colocarmos porque se houver alguma alteração na variável provavelmente deverá ter que ser feita outra chamada a api.

Agora vamos salvar as informações do repositório dentro do componente.
- Usaremos useState:
    import React, { useEffect, useState } from 'react';

- Inicializamos o valor de estado como null para repository:
    const [repository, setRepository] = useState(null);

Quando criamos um estado que não é um valor primitivo (string, number, boolean), ou seja, para um array ou objeto devemos tipar esse objeto. 
  - Para isso iremos copiar a interface de Dashboard e incluir mais algumas informações:
      interface Repository {
        full_name: string;
        description: string;
        stargazers_count: number;
        forks_count: number;
        open_issues_count: number;
        owner: {
          login: string;
          avatar_url: string;
        }
      }

  - Informamos o retorno como um repositório ou nulo e inicializamos como nulo porque no primeiro carregamento não terá valor:
      const [repository, setRepository] = useState<Repository | null>(null);

  - Criamos uma interface para issues:
      interface Issue {
        id: number;
        title: string;
        html_url: string;
        user: {
          login: string;
        }
      }
- Inicializamos o valor de estado como um array vazio para issues:
    const [issues, setIssues] = useState<Issue[]>([]);

Agora substituiremos as informações estáticas do repositório pelas vindas da api:
  - O Typescript coloca uma ? que signfica optional chaining porque repository pode ser nulo, então o que será mostrado?:
      <img src={repository?.owner.avatar_url} alt="Amauri" />
    
    Isso acontece da seguinte forma:
      Se existir algo dentro do repositório mostre o avatar e se não existir não mostra nada.
      É a mesma coisa que:
        <img src={repository && repository.owner.avatar_url} alt="Amauri" />
      
      Ou com operador ternário que mostra exatamente como funciona o optional chaining(?):
        <img src={repository ? repository.owner.avatar_url : null} alt="Amauri" />

  Resolvemos fazer dessa forma. Se o repositório existir, mostraremos os dados:
    {repository && (
      <RepositoryInfo>
        <header>
          <img src={repository.owner.avatar_url} alt={repository.owner.login} />
          <div>
            <strong>{repository.full_name}</strong>
            <p>{repository.description}</p>
          </div>
        </header>
        <ul>
          <li>
            <strong>{repository.stargazers_count}</strong>
            <span>Stars</span>
          </li>
          <li>
            <strong>{repository.forks_count}</strong>
            <span>Forks</span>
          </li>
          <li>
            <strong>{repository.open_issues_count}</strong>
            <span>Issues abertas</span>
          </li>
        </ul>
      </RepositoryInfo>
    )}

  O Typescript não mostrará mais o ? porque ele entende que foi feita uma condicional acima.

Agora substituiremos as informações estáticas do repositório pelas vindas da api:
  - Substituiremos também o <Link> por <a> para funcionar o link externo e não uma rota interna.
