- Criar o app:
    create-react-app gobarber-web --template=typescript

- Copiar as devDependencies para package.json:
    "devDependencies": {
        "@testing-library/jest-dom": "^4.2.4",
        "@testing-library/react": "^9.3.2",
        "@testing-library/user-event": "^7.1.2",
        "@types/axios": "^0.14.0",
        "@types/jest": "^24.0.0",
        "@types/node": "^12.0.0",
        "@types/react": "^16.9.0",
        "@types/react-dom": "^16.9.0",
        "@types/react-router-dom": "^5.1.4",
        "@types/styled-components": "^5.1.0",
        "@typescript-eslint/eslint-plugin": "^2.28.0",
        "@typescript-eslint/parser": "^2.28.0",
        "axios-mock-adapter": "^1.18.1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^18.1.0",
        "eslint-config-prettier": "^6.10.1",
        "eslint-import-resolver-typescript": "^2.0.0",
        "eslint-plugin-import": "^2.20.1",
        "eslint-plugin-jsx-a11y": "^6.2.3",
        "eslint-plugin-prettier": "^3.1.3",
        "eslint-plugin-react": "^7.19.0",
        "eslint-plugin-react-hooks": "^2.5.0",
        "prettier": "^2.0.4",
        "react-app-rewired": "^2.1.5",
        "ts-jest": "^25.4.0"
      }

- Instalar as dependências:
    yarn

- Instalar outras dependências:
    yarn add styled-components
    yarn add @types/styled-components -D

- Criar arquivo src/styles/global.ts:
    import { createGlobalStyle } from 'styled-components';

    export default createGlobalStyle`
      * {
        margin: 0;
        padding: 0;
        outline: 0;
        box-sizing: border-box;
      }

      body {
        background: #312E38;
        color: #FFF;
        -webkit-font-smoothing: antialiased;
      }

      body, input, button {
        font-font-family: 'Roboto Slab', serif;
        font-size: 16px;
      }
      
      h1, h2, h3, h4, h5, h6, strong {
        font-weight: 500;
      }

      button {
        cursor: pointer;
      }
    `;

- Em src/App.tsx:
    import React from 'react';
    import GlobalStyle from './styles/global';

    const App: React.FC = () => (
      <>
      <h1>Hello World</h1>
      <GlobalStyle />
      </>
    );

    export default App;

- Instalar os ícones e polished para cores:
    yarn add react-icons 
    yarn add polished
- Execute o projeto:
    yarn start

- Vamos criar 2 componentes para a tela de login dividindo o form da imagem:
  - Vamos deixar criado os estilos em src/pages/SignIn/styles.tsx:
      import styled from 'styled-components';

      export const Container = styled.div``;
      export const Content = styled.div``;
      export const Background = styled.div``;

  - Em src/pages/SignIn/index.tsx:
      import React from 'react';
      import { Container, Content, Background } from './styles';
      import { FiLogIn } from 'react-icons/fi';
      import logoImg from '../../assets/logo.svg';

      const SignIn: React.FC = () => (
        <Container>
          <Content>
            <img src={logoImg} alt="GoBarber" />
            <form>
              <h1>Faça seu login</h1>
              <input placeholder="E-mail" />
              <input type="password" placeholder="Senha" />
              <button type="submit">Entrar</button>
              <a href="forgot">Esqueci minha senha</a>
            </form>
            <a href="login">
              <FiLogIn />
              Criar conta
              </a>
          </Content>
          <Background />
        </Container>
      );

      export default SignIn;

EXPLICANDO CSS
==============
- Em src/pages/SignIn/styles.tsx:
    import styled from 'styled-components';
    import { shade } from 'polished';
    import signInBackgroundImg from '../../assets/sign-in-background.png';

    styled-components: para usar os estilos como componentes
    shade: facilita trabalhar com cores, exemplo para o botão ficar mais escuro
    signInBackgroundImg: imagem salva na pasta assets

    export const Container = styled.div`
      height: 100vh;  ocupa toda a altura da área visualizada
      display: flex;  um componente ao lado do outro
      align-items: stretch; para todos os componentes terem height: 100vh
    `;

    export const Content = styled.div`
      display: flex;  um componente ao lado do outro
      flex-direction: column; para os componentes ficarem abaixo um do outro
      align-items: center; alinhar os itens ao centro
      place-content: center;  todo o conteúdo dos eixos "x" e "y" ficará ao centro
                              o mesmo que justify-content: center e align-items: center
      width: 100%;  ocupará o máximo da tela exceto a imagem Background ao lado
      max-width: 700px; ocupará no máximo 700px
      Isso quer dizer que a imagem Background completará o restante da tela com flex: 1 para isso. Nunca reduzirá o tamanho do conteúdo e nunca ultrapassará 700px.

      form {
        margin: 80px 0; distanciar em cima e abaixo do restante
        width: 340px; para ficar um pouco menor
        text-align: center; alinhar os itens ao centro
        
        h1 {
          margin-bottom: 24px;  distanciar abaixo
        }

        input {
          background: #232129;  cor de fundo
          border-radius: 10px;  borda arredondada
          border: 2px solid #232129;  borda que será enfatizada
          padding: 16px;  distanciar internamente
          width: 100%;  ocupar o máximo que puder
          color:#f4ede8;  cor do texto a ser digitado do input

          &::placeholder {
            color: #666360; cor do placeholder
          }

          & + input { todo input precedido por outro, ou seja, menos o primeiro
            margin-top: 8px;  margem para distanciar do outro input acima
          }
        }

        button {
          background: #FF9000;  cor de fundo
          height: 56px; tamanho fixo
          border-radius: 10px; borda arredondada
          border: 0; sem borda
          padding: 0 16px; distanciar internamente
          color: #312e38; cor do texto do botão
          width: 100%;  ocupar o máximo que puder
          font-weight: 500; "meio negrito"
          margin-top: 16px; distanciar acima
          transition: background-color 0.2s;  mudar gradualmente a cor
          
          &:hover {
            background: ${shade(0.2, '#FF9000')}; shade para botão ficar 0.2 (20%) mais escuro 
          }
        }

        a {
          color: #f4ede8;
          display: block; ocupa toda a linha
          margin-top: 24px;
          text-decoration: none;  sem sublinhado
          transition: color 0.2s; mudar gradualmente a cor

          &:hover {
            color: ${shade(0.2, '#f4ede8')}; shade para link ficar 0.2 (20%) mais escuro 
          }
        }
      }

      > a {   somente a que estiverem diretamente no form e não dentro de outro componente
        color: #FF9000;
        margin-top: 24px;
        text-decoration: none;  sem sublinhado
        transition: color 0.2s; mudar gradualmente a cor
        display: flex;  um componente ao lado do outro
        align-items: center;

        svg {
          margin-right: 16px;
        }

        &:hover {
          color: ${shade(0.2, '#FF9000')};
        }
      }
    `;

    export const Background = styled.div`
      flex: 1;  ocupará todo o espaço menos os 700px do Content
      background: url(${signInBackgroundImg}) no-repeat center; a imagem de fundo importada
      background-size: cover; para não ficar com espaços em volta, ocupando todo o espaço que sobrou
    `;
