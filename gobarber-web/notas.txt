- Criar o app:
    create-react-app gobarber-web --template=typescript

- Copiar as devDependencies para package.json:
    "devDependencies": {
        "@testing-library/jest-dom": "^4.2.4",
        "@testing-library/react": "^9.3.2",
        "@testing-library/user-event": "^7.1.2",
        "@types/axios": "^0.14.0",
        "@types/jest": "^24.0.0",
        "@types/node": "^12.0.0",
        "@types/react": "^16.9.0",
        "@types/react-dom": "^16.9.0",
        "@types/react-router-dom": "^5.1.4",
        "@types/styled-components": "^5.1.0",
        "@typescript-eslint/eslint-plugin": "^2.28.0",
        "@typescript-eslint/parser": "^2.28.0",
        "axios-mock-adapter": "^1.18.1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^18.1.0",
        "eslint-config-prettier": "^6.10.1",
        "eslint-import-resolver-typescript": "^2.0.0",
        "eslint-plugin-import": "^2.20.1",
        "eslint-plugin-jsx-a11y": "^6.2.3",
        "eslint-plugin-prettier": "^3.1.3",
        "eslint-plugin-react": "^7.19.0",
        "eslint-plugin-react-hooks": "^2.5.0",
        "prettier": "^2.0.4",
        "react-app-rewired": "^2.1.5",
        "ts-jest": "^25.4.0"
      }

- Instalar as dependências:
    yarn

- Instalar outras dependências:
    yarn add styled-components
    yarn add @types/styled-components -D

- Criar arquivo src/styles/global.ts:
    import { createGlobalStyle } from 'styled-components';

    export default createGlobalStyle`
      * {
        margin: 0;
        padding: 0;
        outline: 0;
        box-sizing: border-box;
      }

      body {
        background: #312E38;
        color: #FFF;
        -webkit-font-smoothing: antialiased;
      }

      body, input, button {
        font-font-family: 'Roboto Slab', serif;
        font-size: 16px;
      }
      
      h1, h2, h3, h4, h5, h6, strong {
        font-weight: 500;
      }

      button {
        cursor: pointer;
      }
    `;

- Em src/App.tsx:
    import React from 'react';
    import GlobalStyle from './styles/global';

    const App: React.FC = () => (
      <>
      <h1>Hello World</h1>
      <GlobalStyle />
      </>
    );

    export default App;

- Instalar os ícones e polished para cores:
    yarn add react-icons 
    yarn add polished
- Execute o projeto:
    yarn start

- Vamos criar 2 componentes para a tela de login dividindo o form da imagem:
  - Vamos deixar criado os estilos em src/pages/SignIn/styles.tsx:
      import styled from 'styled-components';

      export const Container = styled.div``;
      export const Content = styled.div``;
      export const Background = styled.div``;

  - Em src/pages/SignIn/index.tsx:
      import React from 'react';
      import { Container, Content, Background } from './styles';
      import { FiLogIn } from 'react-icons/fi';
      import logoImg from '../../assets/logo.svg';

      const SignIn: React.FC = () => (
        <Container>
          <Content>
            <img src={logoImg} alt="GoBarber" />
            <form>
              <h1>Faça seu login</h1>
              <input placeholder="E-mail" />
              <input type="password" placeholder="Senha" />
              <button type="submit">Entrar</button>
              <a href="forgot">Esqueci minha senha</a>
            </form>
            <a href="login">
              <FiLogIn />
              Criar conta
              </a>
          </Content>
          <Background />
        </Container>
      );

      export default SignIn;

EXPLICANDO CSS
==============
- Em src/pages/SignIn/styles.tsx:
    import styled from 'styled-components';
    import { shade } from 'polished';
    import signInBackgroundImg from '../../assets/sign-in-background.png';

    styled-components: para usar os estilos como componentes
    shade: facilita trabalhar com cores, exemplo para o botão ficar mais escuro
    signInBackgroundImg: imagem salva na pasta assets

    export const Container = styled.div`
      height: 100vh;  ocupa toda a altura da área visualizada
      display: flex;  um componente ao lado do outro
      align-items: stretch; para todos os componentes terem height: 100vh
    `;

    export const Content = styled.div`
      display: flex;  um componente ao lado do outro
      flex-direction: column; para os componentes ficarem abaixo um do outro
      align-items: center; alinhar os itens ao centro
      place-content: center;  todo o conteúdo dos eixos "x" e "y" ficará ao centro
                              o mesmo que justify-content: center e align-items: center
      width: 100%;  ocupará o máximo da tela exceto a imagem Background ao lado
      max-width: 700px; ocupará no máximo 700px
      Isso quer dizer que a imagem Background completará o restante da tela com flex: 1 para isso. Nunca reduzirá o tamanho do conteúdo e nunca ultrapassará 700px.

      form {
        margin: 80px 0; distanciar em cima e abaixo do restante
        width: 340px; para ficar um pouco menor
        text-align: center; alinhar os itens ao centro
        
        h1 {
          margin-bottom: 24px;  distanciar abaixo
        }

        input {
          background: #232129;  cor de fundo
          border-radius: 10px;  borda arredondada
          border: 2px solid #232129;  borda que será enfatizada
          padding: 16px;  distanciar internamente
          width: 100%;  ocupar o máximo que puder
          color:#f4ede8;  cor do texto a ser digitado do input

          &::placeholder {
            color: #666360; cor do placeholder
          }

          & + input { todo input precedido por outro, ou seja, menos o primeiro
            margin-top: 8px;  margem para distanciar do outro input acima
          }
        }

        button {
          background: #FF9000;  cor de fundo
          height: 56px; tamanho fixo
          border-radius: 10px; borda arredondada
          border: 0; sem borda
          padding: 0 16px; distanciar internamente
          color: #312e38; cor do texto do botão
          width: 100%;  ocupar o máximo que puder
          font-weight: 500; "meio negrito"
          margin-top: 16px; distanciar acima
          transition: background-color 0.2s;  mudar gradualmente a cor
          
          &:hover {
            background: ${shade(0.2, '#FF9000')}; shade para botão ficar 0.2 (20%) mais escuro 
          }
        }

        a {
          color: #f4ede8;
          display: block; ocupa toda a linha
          margin-top: 24px;
          text-decoration: none;  sem sublinhado
          transition: color 0.2s; mudar gradualmente a cor

          &:hover {
            color: ${shade(0.2, '#f4ede8')}; shade para link ficar 0.2 (20%) mais escuro 
          }
        }
      }

      > a {   somente a que estiverem diretamente no form e não dentro de outro componente
        color: #FF9000;
        margin-top: 24px;
        text-decoration: none;  sem sublinhado
        transition: color 0.2s; mudar gradualmente a cor
        display: flex;  um componente ao lado do outro
        align-items: center;

        svg {   estilo do ícone
          margin-right: 16px;
        }

        &:hover {
          color: ${shade(0.2, '#FF9000')};
        }
      }
    `;

    export const Background = styled.div`
      flex: 1;  ocupará todo o espaço menos os 700px do Content
      background: url(${signInBackgroundImg}) no-repeat center; a imagem de fundo importada
      background-size: cover; para não ficar com espaços em volta, ocupando todo o espaço que sobrou
    `;


ISOLANDO COMPONENTES
====================
Como usaremos input e button em vários locais, a melhor forma de reaproveitarmos é separando esses componentes, transformando-os em globais.

Criaremos uma pasta components e dentro cada componente terá dois arquivos: um index e um style.
- Em src/components temos:
    Input
      index.tsx
      styles.css
    Button
      index.tsx
      styles.css

- Em src/components/Input/index.tsx:
    import React, { InputHTMLAttributes } from 'react';
    import { Container } from './styles';

    interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
      name: string;
    }

    const Input: React.FC<InputProps> = () => (
      <Container>
        <input type="text" />
      </Container>
    );

    export default Input;

  Importamos InputHTMLAttributes que contém os atributos do <input> do HTML.
  Importamos Container para o estilo.
  Criamos uma interface para utilizarmos esses atributos e incluir o name como obrigatório, pode ver que não tem interrogação (name?: string). Extendemos de InputHTMLAttributes que tem como parâmetro HTMLInputElement.
  Passamos a interface como parâmetro ao componente para que o mesmo tenha todos os atributos que o <input> do HTML tem.


- Em src/components/Input/styles.ts:
    import styled from 'styled-components';

    export const Container = styled.div``;


- Em src/components/Button/index.tsx:
    import React, { ButtonHTMLAttributes } from 'react';

    type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;

    const button: React.FC<ButtonProps> = () => <button type="button">teste</button>;

    export default button;

  Importamos ButtonHTMLAttributes que contém os atributos do <input> do HTML.
  Não precisamos criar interface no caso do button porque nosso componente não terá novas propriedades e não vamos sobrescrever nenhum atributo já existente desse elemento HTML, ou seja, será uma interface vazia. Para isso faremos uma forma simplificada com type que é uma forma de criarmos tipagem de objetos que são compostas de outra tipagem.
  Passamos a interface como parâmetro ao componente para que o mesmo tenha todos os atributos que o <button> do HTML tem. Poderíamos passar diretamente ButtonHTMLAttributes<HTMLButtonElement> mas ficaria muito grande e por isso uma boa prática é criar um type e passá-lo como parâmetro.


- Em src/components/Button/styles.ts:
    import styled from 'styled-components';

    export const Container = styled.button``;
  
  Aqui não é <div> e sim <button>

Passamos as props dos nossos componentes:
  - Em src/components/Input/index.tsx:
      const Input: React.FC<InputProps> = (props) => (
        <Container>
          <input {...props} />
        </Container>
      );
  
  - Em src/components/Button/index.tsx:
      const button: React.FC<ButtonProps> = (props) => <button type="button" {...props}>teste</button>;
    
    Agora precisamos pegar o texto "Entrar" do button. Vamos alterar a linha acima:
      const button: React.FC<ButtonProps> = ({ children, ...rest }) => (
        <button type="button" {...rest}>
          {children}
        </button>);

    Pegamos o texto do button utilizando desestruturação com children e todas as outras propriedades que vierem ficarão em ...rest e passamos o nome do button com children.

    OBS: Em projetos que não estejam utilizando Typescript, o eslint dará um erro informando que o eslint vem junto com a necessidade de adicionar tipagem estática com a bilioteca react/prop-types mas isso só faz sentido se não estiver usando Typescript porque o mesmo já faz isso.

    - Importamos o Container e substituímos <button> por <Container>:
        import React, { ButtonHTMLAttributes } from 'react';
        import { Container } from './styles';

        type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;

        const button: React.FC<ButtonProps> = ({ children, ...rest }) => (
          <Container type="button" {...rest}>
            {children}
          </Container>);

        export default button;

Agora nos campos de input deveremos inserir os ícones e ajustar a margem:
- Em src/pages/SignIn/index.tsx:
    import { FiLogIn, FiMail, FiLock } from 'react-icons/fi';

    <Input name="email" icon={FiMail} placeholder="E-mail" />
    <Input name="password" icon={FiLock} type="password" placeholder="Senha" />

  Isso gerará um erro porque precisamos informar na interface a tipagem dos icons:
  - Em src/components/Input/index.tsx:
      icons: React.ComponentType;

    O tipo de icon é um componente (FiMail e FiLock) e o React tem uma propriedade chamada ComponentType para receber esse componente como propriedade.

    Precisamos receber as propriedades, inclusive os ícones. Precisamos informar ao React um outro nome porque ele não reconhece <icon> como componente. Então passamos icon: Icon:
      const Input: React.FC<InputProps> = ({icon: Icon, ...rest}) => (
        <Container>
          <input {...rest} />
        </Container>
      );

    Agora como fazer para que o React saiba as propriedades que Icon Tem quando fizermos <Icon /> ?
      Por exemplo, se passarmos:
        icons: React.ComponentType<{ size: string; }>;
      Conseguimos acessar size em <Icon size={12} />
      Sendo assim, importaremos as propriedades que um ícone pode ter:
        import { IconBaseProps } from 'react-icons';
      
      Passamos como parâmetro para icons: React.ComponentType; e assim teremos acesso às propriedades de Icon e deixamos icon como opcional (?):
        icon?: React.ComponentType<IconBaseProps>;

      Fazemos uma verificação se existe o ícone para poder mostrá-lo:
        {Icon && <Icon size={20} />}

      Agora o ícone aparece, porém fora do input. Vamos colocá-lo dentro:
        - Vamos mover o input de src/pages/SignIn/styles.ts para src/pages/SignIn/styles.ts:
          import styled from 'styled-components';

          export const Container = styled.div`

            input {
              background: #232129;
              border-radius: 10px;
              border: 2px solid #232129;
              padding: 12px;
              width: 100%;
              color:#f4ede8;

              &::placeholder {
                color: #666360;
              }

              & + input {
                margin-top: 8px;
              }
            }
          `;

        - Movemos as propriedades do input para o Container:
            import styled from 'styled-components';

            export const Container = styled.div`
                background: #232129;
                border-radius: 10px;
                border: 2px solid #232129;
                padding: 12px;
                width: 100%;
                color:#f4ede8;

              input {

                &::placeholder {
                  color: #666360;
                }

                & + input {
                  margin-top: 8px;
                }
              }
            `;

        - Alinhamos os icons e os inputs:
            display: flex;
            align-items: center;

        - No input adicionamos:
            flex: 1;
            background: transparent;
            border: 0;

        - Como o ícone é opcional, colocaremos a margem nele para distanciar do input:
            svg {
              margin-right: 16px;
            }
        
        - Alteramos a cor do Container e do input para ficarem iguais:
          No Container:
            color: #666360;
          No input:
            color:#f4ede8;

      Ajustaremos as margens dos inputs movendo-a para o Container e o nome para div:
        & + div {
          margin-top: 8px;
        }

Passaremos o estilo do button para seu componente:
  - Movemos de src/pages/SignIn/styles.ts para src/components/Button/styles.ts:
      background: #FF9000;
      height: 46px;
      border-radius: 10px;
      border: 0;
      padding: 0 16px;
      color: #312e38;
      width: 100%;
      font-weight: 500;
      margin-top: 16px;
      transition: background-color 0.2s;
      
      &:hover {
        background: ${shade(0.2, '#FF9000')};
      }
  
  - Importamos shade:
      import { shade } from 'polished';



*****************************
* OS ARQUIVOS FICARAM ASSIM *
*****************************

- Em src/pages/SignIn/index.tsx:
    import React from 'react';
    import { Container, Content, Background } from './styles';
    import { FiLogIn, FiMail, FiLock } from 'react-icons/fi';
    import logoImg from '../../assets/logo.svg';
    import Input from '../../components/Input';
    import Button from '../../components/Button';

    const SignIn: React.FC = () => (
      <Container>
        <Content>
          <img src={logoImg} alt="GoBarber" />
          <form>
            <h2>Faça seu login</h2>
            <Input name="email" icon={FiMail} placeholder="E-mail" />
            <Input name="password" icon={FiLock} type="password" placeholder="Senha" />
            <Button type="submit">Entrar</Button>
            <a href="forgot">Esqueci minha senha</a>
          </form>
          <a href="login">
            <FiLogIn />
            Criar conta
          </a>
        </Content>
        <Background />
      </Container>
    );

    export default SignIn;

- Em src/pages/SignIn/styles.ts:
    import styled from 'styled-components';
    import { shade } from 'polished';
    import signInBackgroundImg from '../../assets/sign-in-background.png';

    export const Container = styled.div`
      height: 100vh;
      display: flex;
      align-items: stretch;
    `;

    export const Content = styled.div`
      display: flex;
      flex-direction: column;
      align-items: center;
      place-content: center;
      width: 100%;
      max-width: 700px;

      form {
        margin: 40px 0;
        width: 340px;
        text-align: center;
        
        h2 {
          margin-bottom: 16px;
        }

        a {
          color: #f4ede8;
          display: block;
          margin-top: 24px;
          text-decoration: none;
          transition: color 0.2s;

          &:hover {
            color: ${shade(0.2, '#f4ede8')};
          }
        }
      }

      > a {
        color: #FF9000;
        margin-top: 24px;
        text-decoration: none;
        transition: color 0.2s;
        display: flex;
        align-items: center;

        svg {
          margin-right: 16px;
        }

        &:hover {
          color: ${shade(0.2, '#FF9000')};
        }
      }
    `;

    export const Background = styled.div`
      flex: 1;
      background: url(${signInBackgroundImg}) no-repeat center;
      background-size: cover;
    `;

- Em src/components/Button/index.tsx:
    import React, { ButtonHTMLAttributes } from 'react';
    import { Container } from './styles';

    type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;

    const button: React.FC<ButtonProps> = ({ children, ...rest }) => (
      <Container type="button" {...rest}>
        {children}
      </Container>);

    export default button;

- Em src/components/Button/styles.ts:
    import styled from 'styled-components';
    import { shade } from 'polished';

    export const Container = styled.button`
      background: #FF9000;
      height: 46px;
      border-radius: 10px;
      border: 0;
      padding: 0 16px;
      color: #312e38;
      width: 100%;
      font-weight: 500;
      margin-top: 16px;
      transition: background-color 0.2s;
      
      &:hover {
        background: ${shade(0.2, '#FF9000')};
      }
    `;

- Em src/components/Input/index.tsx:
    import React, { InputHTMLAttributes } from 'react';
    import { IconBaseProps } from 'react-icons';
    import { Container } from './styles';

    interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
      name: string;
      icon?: React.ComponentType<IconBaseProps>;
    }

    const Input: React.FC<InputProps> = ({ icon: Icon, ...rest }) => (
      <Container>
        {Icon && <Icon size={20} />}
        <input {...rest} />
      </Container>
    );

    export default Input;

- Em src/components/Input/styles.ts:
    import styled from 'styled-components';

    export const Container = styled.div`
        background: #232129;
        border-radius: 10px;
        border: 2px solid #232129;
        padding: 12px;
        width: 100%;
        color: #666360;

        display: flex;
        align-items: center;

        & + div {
          margin-top: 8px;
        }

      input {
        flex: 1;
        background: transparent;
        border: 0;
        color:#f4ede8;

        &::placeholder {
          color: #666360;
        }

      }
      svg {
        margin-right: 16px;
      }
    `;

********************
* FIM DOS ARQUIVOS *
********************


UTLIZANDO UNFORM
================

Quando utilizamos estados, toda vez que um componente sofre alteração, o componente é renderizado e mostrado novamente. No caso do <input> temos 3 e cada letra digitada conta como uma alteração, comprometendo a performance. Então utilizaremos o UnForm que é uma biblioteca feita pela Rocketseat.

- Instalar as bibliotecas:
    yarn add @unform/core @unform/web
    @unform/core: para web e mobile
    @unform/web: integração do UnForm para ReactJS pode ser trocado para mobile no React Native

- Em src/pages/SignUp/index.tsx:
    import { Form } from '@unform/web';

  - Trocamos <form> por <Form>

  - No componente SignUp vamos alterar para colocar o código dentro do return e criar uma função que será executada a partir do <Form>:

      import React from 'react';
      import { Form } from '@unform/web';
      import { FiMail, FiLock, FiUser, FiArrowLeft } from 'react-icons/fi';
      import { Container, Content, Background } from './styles';
      import logoImg from '../../assets/logo.svg';
      import Input from '../../components/Input';
      import Button from '../../components/Button';

      const SignUp: React.FC = () => {
        function handleSubmit(data: object): void {
          console.log(data);
        }

        return (
          <Container>
            <Background />
            <Content>
              <img src={logoImg} alt="GoBarber" />
              <Form onSubmit={handleSubmit}>
                <h2>Faça seu cadastro</h2>
                <Input name="name" icon={FiUser} placeholder="Nome" />
                <Input name="email" icon={FiMail} placeholder="E-mail" />
                <Input name="password" icon={FiLock} type="password" placeholder="Senha" />
                <Button type="submit">Cadastrar</Button>
              </Form>
              <a href="login">
                <FiArrowLeft />
              Voltar para login
            </a>
            </Content>
          </Container>
        );
      };

      export default SignUp;

    export default SignUp;

Agora precisamos informar quais campos serão monitorados pelo UnForm no submit. Vamos utilizar nosso Input pra fazer a lógica de registro pois ele será utilizado em muitos locais:
- Em src/components/Input/index.tsx:
  - Importamos um hook que recebe como parâmetro o nome do campo que retorna várias propriedades:
    import {useField} from '@unform/core';
  - Vamos colocar um corpo e colocar o código dentro de um return:
      import React, { InputHTMLAttributes } from 'react';
      import {useField} from '@unform/core';
      import { IconBaseProps } from 'react-icons';
      import { Container } from './styles';

      interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
        name: string;
        icon?: React.ComponentType<IconBaseProps>;
      }

      const Input: React.FC<InputProps> = ({ icon: Icon, ...rest }) => {

        return (
          <Container>
            {Icon && <Icon size={20} />}
            <input {...rest} />
          </Container>
        );
      };

      export default Input;

  - Pegamos esses dados do campo:
      const { fieldName, defaultValue, error, registerField } = useField(name);

      registerField: é o registro que precisamos fazer assim que o input for exibido em tela com useEffect.
  
  - Vamos importar useEffect e utilizá-la. Deixaremos o arquivo assim por enquanto:
      import React, { InputHTMLAttributes, useEffect, useRef } from 'react';
      import { useField } from '@unform/core';
      import { IconBaseProps } from 'react-icons';
      import { Container } from './styles';

      interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
        name: string;
        icon?: React.ComponentType<IconBaseProps>;
      }

      const Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {
        const inputRef = useRef(null);
        const { fieldName, defaultValue, error, registerField } = useField(name);

        useEffect(() => {
          registerField({
            name: fieldName,
            ref: inputRef.current,
            path: 'value',
          });
        }, [fieldName, registerField]);

        return (
          <Container>
            {Icon && <Icon size={20} />}
            <input ref={inputRef} {...rest} />
          </Container>
        );
      };

      export default Input;

    Explicando:

          

      Assim que o componente for exibido em tela chamamos registerField que recebe algumas propriedades.
        name: nome do campo (fieldName)
        ref:  no React são formas de acessar o elemento de uma forma direta sem precisar armazenar 
              em um estado por exemplo. Seria como document.querySelector('input')
              Para isso importamos useRef e criamos a referência com valor inicial nulo:
                const inputRef = useRef(null);
              - Passamos a referência no input:
                <input ref={inputRef} {...rest} />
              Isso associa o input com useRef, ou seja, se acessarmos inputRef teremos acesso ao elemento na DOM como se estivesse usando um JS normal.
              inputRef tem a propriedade current onde fica o input.
        path: de onde o UnForm vai buscar, dentro de ref, o valor do input. Seria como:
              document.querySelector('input').value
        [fieldName, registerField]: informamos que estamos utilizando as variáveis

        No momento que demos o submit, o unForm foi em cada um dos inputs que foram registrados, acessou o elemento e pegou os valores(value)

  Se preenchermos o form de cadastro podemos ver no console.log os dados preenchidos.


